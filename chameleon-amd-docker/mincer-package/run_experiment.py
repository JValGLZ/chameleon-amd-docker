import argparse
import datetime
import os
import shutil
import subprocess
import traceback
from mincer_package import get_system_info

def run_script(path, script_name):
    """Run a script in the given directory and return its output."""
    script_path = os.path.join(path, script_name)
    if not os.path.exists(script_path):
        raise FileNotFoundError(f"Script not found: {script_path}")
    
    # Make script executable
    os.chmod(script_path, 0o755)
    
    # Run the script and capture output
    result = subprocess.run(
        ["/bin/bash", script_path],
        cwd=path,
        capture_output=True,
        text=True,
        timeout=300  # 5 minute timeout
    )
    
    if result.returncode != 0:
        # If script failed, include error information
        output = f"STDOUT:\n{result.stdout}\nSTDERR:\n{result.stderr}\nReturn code: {result.returncode}"
        raise RuntimeError(f"Script failed with return code {result.returncode}. Error details:\n{output}")
    
    # If successful, return just the stdout
    return result.stdout

def compare_output(output_file, reference_file):
    """Compare output file with reference file and return differences."""
    try:
        with open(output_file, 'r') as f:
            output_lines = f.readlines()
    except FileNotFoundError:
        return [f"ERROR: Output file not found: {output_file}"]
    
    try:
        with open(reference_file, 'r') as f:
            reference_lines = f.readlines()
    except FileNotFoundError:
        return [f"ERROR: Reference file not found: {reference_file}"]
    
    # Simple line-by-line comparison
    differences = []
    max_lines = max(len(output_lines), len(reference_lines))
    
    for i in range(max_lines):
        output_line = output_lines[i] if i < len(output_lines) else ""
        reference_line = reference_lines[i] if i < len(reference_lines) else ""
        
        if output_line.strip() != reference_line.strip():
            differences.append(f"Line {i+1}: Expected '{reference_line.strip()}', Got '{output_line.strip()}'")
    
    return differences

def write_log(system_info, run_log, diff, log_path):
    """Write test results to a log file."""
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    with open(log_path, 'w') as f:
        f.write(f"Self-Test Log - {timestamp}\n")
        f.write("=" * 50 + "\n\n")
        
        f.write("System Information:\n")
        for key, value in system_info.items():
            f.write(f"  {key}: {value}\n")
        f.write("\n")
        
        f.write("Experiment Run Log:\n")
        f.write(run_log)
        f.write("\n\n")
        
        f.write("Output Comparison:\n")
        if not diff:
            f.write("  PASS: Output matches reference\n")
        elif len(diff) == 0:  # Empty diff list means no comparison was done
            f.write("  SKIP: No reference file provided\n")
        else:
            f.write("  FAIL: Output differs from reference\n")
            for line in diff:
                f.write(f"  {line}\n")

def main():
    parser = argparse.ArgumentParser(description="Self-test reproducibility on current hardware.")
    parser.add_argument("--path", required=True, help="Path to the experiment directory")
    parser.add_argument("--reference", required=False, help="Path to the reference output file to compare against (optional)")
    parser.add_argument("--output", default="output.txt", help="Output filename generated by the test")
    parser.add_argument("--script", default="run.sh", help="Script to run for the experiment (default: run.sh)")
    args = parser.parse_args()

    system_info = {}
    run_log = ""
    diff = []
    error_occurred = False

    # Prepare results directory
    timestamp = datetime.datetime.now().strftime("%Y-%m-%dT%H-%M-%S")
    results_dir = os.path.join(args.path, f"log_execution_{timestamp}")
    os.makedirs(results_dir, exist_ok=True)
    log_path = os.path.join(results_dir, f"log_execution_{timestamp}.txt")
    output_path = os.path.join(results_dir, args.output)

    # System info
    try:
        system_info = get_system_info()
        print("=== System Information ===")
        for k, v in system_info.items():
            print(f"{k}: {v}")
    except Exception as e:
        print(f"ERROR getting system info: {e}")
        error_occurred = True

    # Run experiment
    print("\n=== Running Experiment ===")
    try:
        run_log = run_script(args.path, args.script)
        with open(output_path, "w") as f:
            f.write(run_log)
        print(f"Output saved to: {output_path}")
    except Exception as e:
        run_log = f"ERROR running experiment: {e}\n{traceback.format_exc()}"
        print(run_log)
        error_occurred = True

    # Compare output
    print("\n=== Comparing Output ===")
    try:
        if not args.reference:
            diff = []
            print("SKIP: No reference file provided - test completed successfully")
        elif not os.path.exists(args.reference):
            diff = [f"ERROR: Reference file not found: {args.reference}\n"]
            print(diff[0])
            error_occurred = True
        else:
            diff = compare_output(output_path, args.reference)
            if diff and not any(line.startswith("ERROR") for line in diff):
                print("FAIL: Output does not match reference.")
                print("First differences:")
                for line in diff[:10]:
                    print(line.strip())
            elif not diff:
                print("PASS: Output matches reference.")
            else:
                print(diff[0])
    except Exception as e:
        diff = [f"ERROR comparing output: {e}\n{traceback.format_exc()}"]
        print(diff[0])
        error_occurred = True

    # Log file generation
    try:
        write_log(system_info, run_log, diff, log_path)
        print(f"Test log written to: {log_path}")
    except Exception as e:
        print(f"ERROR writing log file: {e}")

if __name__ == "__main__":
    main()
